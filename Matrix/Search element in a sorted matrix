//1. Set variables to search thr Row and Column using BINARY SEARCH ALGO.
//2. Find the ROW in which our element might be. (Using TopRow & BottomRow pointers)
//   [ Check if value lies between end point of row ]
//3. Find the COLUMN in which our elemnt might be. (Using LeftCol & RightCol pointers)
//   [ Check if value lies between end points of column ]
//4. Check if the value matches.


public static boolean Find_Element (int [][] A, int value)
    {
        //(1.) Setting up variables.
        int NumberOfRows = A.length;
        int NumberOfColumns = A[0].length;
        
        int TopRow = 0;
        int BottomRow = NumberOfRows - 1;
        int row = -1;
        
        //(2.) Find ROW in which element might be.
        while(TopRow <= BottomRow)
        {
            // Setting up BINARY SEARCH variable.
            row = (TopRow + BottomRow)/2;
            
            // If 'value' is greater it lies on a row number greater than 'row' so TopRow is moved.
            if(value > A[row][NumberOfColumns - 1])
            {
                TopRow = row + 1;
            }
            
            // // If 'value' is lesser it lies on a row number lesser than 'row' so BottomRow is moved.
            else if(value < A[row][0])
            {
                BottomRow = row - 1;
            }
            
            // If 'value' lies in the range of row, we break out as we have found the 'row' number.
            else
            {
                break;
            }
        }
        
        // None of the rows contain 'value'
        if(TopRow > BottomRow)
        {
            return false;
        }
        
        
        int LeftCol = 0;
        int RightCol = NumberOfColumns - 1;
        int col = -1;
        
        //(3.) Find COLUMN in which element might be.
        while(LeftCol <= RightCol)
        {
            // Setting up BINARY SEARCH variable.
            col = (LeftCol + RightCol)/2;
            
            // If 'value' is greater than element, it lies in a column number greater than 'col', so LeftCol is moved.
            if(value > A[row][col])
            {
                LeftCol = col + 1;
            }
            
            // If 'value' is lesser than element, it lies in a column number lesser than 'col', so RightCol is moved.
            else if(value < A[row][col])
            {
                RightCol = col - 1;
            }
            
            //(4.) 'value' is same as element.
            else
            {
                return true;
            }
        }
        
        // None of the columns contain 'value'.
        return false;
    }